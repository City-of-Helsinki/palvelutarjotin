from anymail.signals import pre_send
from django.db.models.signals import post_delete, post_save
from django.dispatch import receiver
from occurrences.consts import NotificationTemplate
from occurrences.models import Enrolment
from occurrences.utils import send_event_notifications_to_contact_person


@receiver(post_save, sender=Enrolment, dispatch_uid="send_enrolment_email")
def send_enrolment_email(instance, created, **kwargs):
    # Do not sent enrolment received notification if the occurrence auto accept the
    # enrolment, instead only send enrolment approved notification
    if created and not instance.occurrence.p_event.auto_acceptance:
        send_event_notifications_to_contact_person(
            instance.person,
            instance.occurrence,
            instance.study_group,
            instance.notification_type,
            NotificationTemplate.OCCURRENCE_ENROLMENT,
            NotificationTemplate.OCCURRENCE_ENROLMENT_SMS,
            event=instance.occurrence.p_event.get_event_data(),
            enrolment=instance,
        )


@receiver(post_delete, sender=Enrolment, dispatch_uid="send_unenrolment_email")
def send_unenrolment_email(instance, **kwargs):
    send_event_notifications_to_contact_person(
        instance.person,
        instance.occurrence,
        instance.study_group,
        instance.notification_type,
        NotificationTemplate.OCCURRENCE_UNENROLMENT,
        NotificationTemplate.OCCURRENCE_UNENROLMENT_SMS,
        event=instance.occurrence.p_event.get_event_data(),
        enrolment=instance,
    )


@receiver(pre_send)
def remove_message_id(sender, message, **kwargs):
    # We need to remove the already generated Message-ID and let it be generated by the
    # ESP in order to avoid the message being identified as spam by some strict
    # filters.
    message.extra_headers.pop("Message-ID", None)
